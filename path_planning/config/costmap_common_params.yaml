# obstacle_range: 2.0
# raytrace_range: 8
base_local_planner: dwa_local_planner/DWAPlannerROS

# TODO
# footprint: [[0.40, 0.40], [0.40, -0.40], [-0.40, -0.40], [-0.40, 0.40]]
# footprint: [[0.6475, 0.435], [0.6475, -0.435], [-0.6475, -0.435], [-0.6475, 0.435]]
footprint: [[-0.35, -0.35], [1, -0.35], [1, 0.35], [-0.35, 0.35]]
# Correct:
# footprint: [[0.5475, 0.335], [0.5475, -0.335], [-0.5475, -0.335], [-0.5475, 0.335]]
# map_topic: /staticmap
# subscribe_to_updates: true
global_frame: map
robot_base_frame: base_link
always_send_full_costmap: true

# map_topic: /staticmap
# subscribe_to_updates: true

static_layer:
  map_topic: /staticmap
  subscribe_to_updates: true

dynamic_layer:
  map_topic: /merged_map
  subscribe_to_updates: true

inflater_layer:
  inflation_radius: 0.0
  cost_scaling_factor: 10.0

# mapping_layer:
#     map_topic: /zedA/map
#     subscribe_to_updates: true

# obstacle_layer:
#   observation_sources: laser_scan_sensor
#   laser_scan_sensor:
#     {
#       sensor_frame: camera_link,
#       data_type: LaserScan,
#       topic: scan,
#       marking: true,
#       clearing: true,
#       inf_is_valid: true,
#       observation_persistence: 0,
#       min_obstacle_height: 0.0,
#       max_obstacle_height: 5.0,
#       obstacle_range: 5.0,
#       raytrace_range: 8.5,
#     }

# obstacle_layer:
#     observation_sources: laser_scan_sensor
#     laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}

obstacle_layer:
    observation_sources: point_cloud_sensor
    observation_persistence: 0.0
    point_cloud_sensor: {
        min_obstacle_height: 0.5,
        max_obstacle_height: 1.5,
        sensor_frame: camera_link,
        data_type: PointCloud2,
        topic: /cloud,
        marking: true,
        clearing: true,
        inf_is_valid: true,
        clear_on_max_reading: true,
        observation_persistence: 0,
        obstacle_range: 2.0,
        raytrace_range: 9.9,
    }

# obstacle_layer:
#   # ...
#   observation_sources: scan
#   scan:
#     data_type: LaserScan
#     sensor_frame: camera_link,
#     topic: /scan # Your LaserScan topic
#     marking: true
#     clearing: true
#     inf_is_valid: true # This parameter does the trick!
#     min_obstacle_height: -3
#     max_obstacle_height: 3
#     obstacle_range: 2.5
#     raytrace_range: 8.5

# inflater_layer:
#   inflation_radius: 0.1

# laser_scan_sensor: {sensor_frame: camera_link, data_type: LaserScan, topic: scan, marking: true, clearing: true}
# rgbd_obstacle_layer:
#   enabled:               true
#   voxel_decay:           30     #seconds if linear, e^n if exponential
#   decay_model:           0      #0=linear, 1=exponential, -1=persistent
#   voxel_size:            0.1   #meters
#   track_unknown_space:   true   #default space is unknown
#   observation_persistence: 0.0  #seconds
#   max_obstacle_height:   2.0    #meters
#   unknown_threshold:     15     #voxel height
#   mark_threshold:        0      #voxel height ...

# plugins:
#   - { name: static_layer, type: "costmap_2d::StaticLayer" }
#   - { name: dynamic_layer, type: "costmap_2d::StaticLayer" }
#   # - {name: mapping_layer,           type: "costmap_2d::StaticLayer"}
#   # - {name: inflation_layer,        type: "costmap_2d::InflationLayer"}
#   - { name: obstacle_layer, type: "costmap_2d::ObstacleLayer" }
#   - {name: inflater_layer, type: "costmap_2d::InflationLayer"}
#   # - { name: obstacle_layer, type: "costmap_2d::RangeSensorLayer" }

# # VoxelLayer
# # RangeSensorLayer
