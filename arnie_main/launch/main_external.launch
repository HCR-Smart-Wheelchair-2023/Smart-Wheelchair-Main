<?xml version="1.0" ?>
<launch>


	<arg name="joystick"            default="$(optenv RNET_JOYSTICK external)"/>           <!-- "external" or "robot" -->
	<arg name="rviz"                default="true"/>
    <arg name="enable_move_base"    default="$(optenv RNET_ENABLE_MOVE_BASE false)"/>

    <arg name="rtabmap_mode"        default="$(optenv RNET_SLAM_MODE localisation)"/>   <!-- "mapping" or "localisation" -->
    <arg name="run_slam_on"         default="$(optenv RNET_RUN_SLAM_ON externa;)"/> <!-- "robot" or "external" -->
    <arg name="rtabmap_db_path"     default="$(optenv RNET_RTABMAP_ARNIE_LOC_DB_PATH '')"/>
    <arg name="odom_mode"           default="$(optenv RNET_ODOM visual_jetson)"/>       <!-- "t265", "visual_jetson" or "visual_external" -->

    <!-- Send Commands to the PI via socket connection -->
    <node pkg="arnie_navigation" type="robot_interface.py" name="robot_interface" output="screen" />
    <!-- Start rviz -->
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find arnie_main)/rviz/arnie.rviz" if="$(arg rviz)"/>

    <node pkg="nodelet" type="nodelet" name="external_nodelet_manager" args="manager" output="screen"/>

    <!-- <include file="$(find arnie_localisation)/launch/rtabmap_mapping.launch">
		<arg name="run_slam"            value="false"   if="$(eval arg('run_slam_on') == 'robot')"/>
        <arg name="run_slam"            value="true"    if="$(eval arg('run_slam_on') == 'external')"/>

        <arg name="run_visual_odom"     value="true"    if="$(eval arg('odom_mode') == 'visual_external')"/>
        <arg name="run_visual_odom"     value="false"   unless="$(eval arg('odom_mode') == 'visual_external')"/>

        <arg name="odom_topic"          value="/rtabmap/visual_odom"  if="$(eval arg('odom_mode') == 'visual_external')"/>
        <arg name="odom_topic"          value="/rtabmap/visual_odom"  if="$(eval arg('odom_mode') == 'visual_jetson')"/>
        <arg name="odom_topic"          value="/t265/odom"            if="$(eval arg('odom_mode') == 't265')"/>

        <arg name="run_relay"           value="true"    if="$(eval arg('odom_mode') == 'visual_external')"/>
        <arg name="run_relay"           value="false"   unless="$(eval arg('odom_mode') == 'visual_external')"/>

        <arg name="manager"             value="/external_nodelet_manager"/>

        <arg name="rtabmap_mode"        value="$(arg rtabmap_mode)"/>
        <arg name="rtabmap_db_path"     value="$(arg rtabmap_db_path)"/>

	</include> -->


	<!-- NAVIGATION PART; TO MOVE TO SEPARATE PACKAGE -->

	<group ns="amiga_nav">

		<!-- User joystick input -->
		<group if="$(eval arg('joystick') == 'external')">
			<node name="joystick_driver" pkg="joy" type="joy_node" >
				<param name="autorepeat_rate" value="50"/>
				<param name="dev" value="/dev/input/js0"/>
			</node>

			<node name="joystick_to_twist" pkg="teleop_twist_joy" type="teleop_node">
                <param name="scale_linear"          value="0.15" if="$(eval arg('rtabmap_mode') == 'mapping')" />
                <param name="scale_angular"         value="0.1" if="$(eval arg('rtabmap_mode') == 'mapping')"/>
                <param name="scale_linear"          value="0.3" if="$(eval arg('rtabmap_mode') == 'localisation')" />
                <param name="scale_angular"         value="0.3" if="$(eval arg('rtabmap_mode') == 'localisation')"/>

                <remap from="cmd_vel" to="user_cmd_vel"/>
			</node>
		</group>

		<!-- <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pcl_to_laser">
			<remap from="cloud_in" to="/rtabmap/local_grid_obstacle"/>
            <remap from="scan" to="local_scan"/>
		</node> -->


		<!-- Move Base obstacle avoidance + autonomous nav -->
        <node pkg="move_base" type="move_base" respawn="false" name="move_base" if="$(arg enable_move_base)">
            <!-- General & global path planning configuration -->
            <param name="base_global_planner" value="global_planner/GlobalPlanner"/>
            <rosparam file="$(find arnie_navigation)/config/amiga/planner.yaml" command="load"/>
            <rosparam file="$(find arnie_navigation)/config/amiga/global_planner.yaml" command="load"/>

            <!-- Local path planning configuration -->
            <param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/>
            <rosparam file="$(find arnie_navigation)/config/amiga/base_local_planner.yaml" command="load"/>

            <!-- Common costmap parameters -->
            <rosparam file="$(find arnie_navigation)/config/amiga/costmap_common_params.yaml" command="load" ns="global_costmap"/>
            <rosparam file="$(find arnie_navigation)/config/amiga/costmap_common_params.yaml" command="load" ns="local_costmap"/>

            <!-- Local costmap setup -->
            <rosparam file="$(find arnie_navigation)/config/amiga/local_costmap_params.yaml" command="load" ns="local_costmap"/>

            <!-- Global costmaps, either static or not depending on whether map is available -->
            <rosparam file="$(find arnie_navigation)/config/amiga/global_costmap_params.yaml" command="load" ns="global_costmap"/>

            <!-- <remap from="odom" to="/rtabmap/visual_odom"/>   -->
            <remap from="odom" to="/t265/odom"/>
            <remap from="cmd_vel" to="auto_vel"/>
            <remap from="base_scan" to="local_scan"/>
            <remap from="/amiga_nav/move_base_simple/goal" to="/move_base_simple/goal"/>
            <remap from="map" to="/rtabmap/grid_map"/>
        </node>


		<!-- Obstacle avoidance for safe navigation either autonomously or in a blended input manner -->
        <!-- <node pkg="reactive_assistance" type="reactive_assistance_node" name="reactive_assistance_node"> -->
			<!-- Length and width of rectangular mobile base -->
            <!-- <param name="footprint_length" value="1"/>
            <param name="footprint_width" value="0.55"/> -->

			<!-- Robot's kinematics -->
            <!-- <param name="max_lin_vel" value="0.2"/>
            <param name="max_ang_vel" value="0.2"/> -->

			<!-- Forward simulation time of trajectory for shared control -->
            <!-- <param name="sim_time" value="1"/> -->

			<!-- Parameter used in the admissible gap method -->
            <!-- <param name="dvel_safe" value="0.9"/> -->

            <!-- <param name="base_frame" value="$(arg base_frame_id)"/> -->

            <!-- Subscriber topics -->
            <!-- <param name="laser_sub_topic" value="$(arg scan_topic)"/>
            <param name="odom_sub_topic" value="$(arg odom_topic)"/>
            <param name="cmd_sub_topic" value="user_cmd_vel"/>
            <param name="goal_sub_topic" value="move_base_simple/goal"/>  -->

            <!-- Publisher topics -->
            <!-- <param name="safe_cmd_pub_topic" value="obs_avoid_vel"/>
            <param name="auto_cmd_pub_topic" value="auto_vel"/>
        </node>    -->


		<!-- Shared control node to mediate between input velocities and produce output command -->
        <node pkg="shared_control" type="shared_controller.py" name="shared_controller">
            <param name="user_cmd_sub_topic" value="user_cmd_vel"/>
            <param name="obs_avoid_cmd_sub_topic" value="obs_avoid_vel"/>
            <param name="autonomy_cmd_sub_topic" value="auto_vel"/>
            <param name="cmd_vel_pub_topic" value="/cmd_vel"/>
            <param name="rate" value="10"/>
            <param name="deadzone" value="0.05"/>
        </node>


	</group>


</launch>
