<launch>
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find wheele_gazebo)/worlds/wheele.world"/>
    <arg name="gui" value="true"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="paused" value="false"/>
    <!-- more default parameters can be changed here -->
  </include>

  <rosparam>
    wheele/mobile_base_controller:
      enable_odom_tf: False
  </rosparam>


  <!-- NEW: START THE DOUBLE ODOMETRY SENSOR FUSION -->

  <!-- Launch the data fusion node -->
  <include file="$(find robot_localization)/launch/zed_fusion.launch"> 
  </include>

  <!-- Define transforms (for output odom and camera) -->
  <node pkg="tf" type="static_transform_publisher" name="odom" args="0 0 0 0 0 0 map odom 100" />
  <node pkg="tf" type="static_transform_publisher" name="camera_link"
            args="0.38 0 0.48 1.57 3.14 1.57 base_link camera_link 100" />
  <!-- TODO: add transforms from odom sensors to base_link (as above for camera) -->


  <!-- Spawn the room model -->
  <node name="spawn_room" pkg="gazebo_ros" type="spawn_model" args="-file $(find room_description)/urdf/room_1.urdf -urdf -z 0 -x 4 -y 4.3
  -Y -1.57 -model room_description" />

  <!-- Load the URDF wheele model desciption -->
  <param name="wheele/robot_description"
    command="$(find xacro)/xacro --inorder '$(find wheele_description)/urdf/wheelchair_3.urdf'" />

  <!-- Spawn the URDF wheele model -->
  <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model" output="screen" ns="wheele"
    args="-urdf -param robot_description -model wheele -x 2 -y 2 -z 0.5" />

  <!-- Find the controller config file -->
  <rosparam file="$(find wheele_sim_control)/config/wheele_control.yaml" command="load"/>

  <!-- Relay /cmd_vel to input topic -->
  <node name="relay" pkg="topic_tools" type="relay" respawn="false" output="screen"
    args="/cmd_vel /wheele/mobile_base_controller/cmd_vel"/>

  <!-- Start controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" ns="wheele" args="mobile_base_controller joint_state_controller"/>

  <!-- Convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" ns="wheele" output="screen" />

  <!-- Spawn the actor model -->
  <node name="spawn_actor" pkg="gazebo_ros" type="spawn_model" args="-file $(find wheele_gazebo)/models/actor.sdf -sdf -model actor1" />

  <!-- Run the actor_msg_maker node to translate Odometry into People msgs -->
  <node pkg="wheele_gazebo" type="actor_msg_maker.py" name="actor_msg_maker" output="screen" />

</launch>
